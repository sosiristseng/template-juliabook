name: CI with GNU parallel

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NJOBS: '4'
  TIMEOUT: '-1'    # nbconvert timeout
  EXTRA_ARGS: ''   # Extra arguments for nbconvert
  CACHE_NUM: '1'
  JULIA_CONDAPKG_BACKEND: 'Null'
  JULIA_CI: 'true'

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
      id: cp
      with:
        python-version: '3.x'
    - name: Cache pip dependencies
      uses: actions/cache@v4
      id: cache-py
      with:
        path: ${{ env.pythonLocation }}
        key:  ${{ runner.os }}-pip-${{ steps.cp.outputs.python-version }}-${{ hashFiles('requirements.txt') }}
    - name: Install pip dependencies if cache miss
      if: ${{ steps.cache-py.outputs.cache-hit != 'true' }}
      run: pip install -r requirements.txt
    - name: Read Julia version
      uses: SebRollen/toml-action@v1.2.0
      id: read_toml
      with:
        file: 'Manifest.toml'
        field: 'julia_version'
    - name: Setup Julia
      uses: julia-actions/setup-julia@v1
      with:
        version: ${{ steps.read_toml.outputs.value }}
        show-versioninfo: 'true'
    - name: Cache Julia packages
      uses: actions/cache@v4
      id: cache-julia
      with:
        path: |
          ~/.julia
          !~/.julia/registries
        key: ${{ runner.os }}-julia-${{ env.CACHE_NUM }}-${{ hashFiles('src/**','Project.toml', 'Manifest.toml')}}
        restore-keys: |
          ${{ runner.os }}-julia-${{ env.CACHE_NUM }}-
    - name: Install Julia packages
      if: ${{ steps.cache-julia.outputs.cache-hit != 'true' }}
      shell: julia --color=yes {0}
      run: |
        using Pkg, Dates
        Pkg.add(["IJulia"])
        Pkg.activate(".")
        Pkg.instantiate()
        Pkg.precompile()
        Pkg.gc(collect_delay=Day(0))
    - name: Install IJulia kernel
      run: julia --color=yes -e 'using IJulia; installkernel("Julia", "--project=@. --heap-size-hint=3G")'
    - name: Execute Notebooks
      run: >
        find docs -type f -name '*.ipynb' |
        parallel --joblog /tmp/job.log -j${NJOBS} jupyter nbconvert --to notebook --execute --inplace ${{ env.EXTRA_ARGS }}
        --ExecutePreprocessor.timeout=${{ env.TIMEOUT }}
        --ExecutePreprocessor.kernel_name=julia-1.$(julia -e 'print(VERSION.minor)')
        {}
    - name: Show execution stats
      run: cat /tmp/job.log
    - name: Build website
      run: jupyter-book build docs/
    - name: Upload pages artifact
      if: ${{ github.ref == 'refs/heads/main' }}
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/_build/html/

  # Deploy pages
  deploy:
    needs: CI
    if: ${{ github.ref == 'refs/heads/main' }}
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
      actions: read   # to download an artifact uploaded by `actions/upload-pages-artifact@v3`
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
